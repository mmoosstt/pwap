/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class PupilClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Getall
     * @return Successful Response
     */
    all(): Promise<Pupils> {
        let url_ = this.baseUrl + "/spos/pupil/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAll(_response);
        });
    }

    protected processAll(response: Response): Promise<Pupils> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Pupils.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Pupils>(<any>null);
    }

    /**
     * Getdefault
     * @return Successful Response
     */
    default(): Promise<Pupil> {
        let url_ = this.baseUrl + "/spos/pupil/default";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDefault(_response);
        });
    }

    protected processDefault(response: Response): Promise<Pupil> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Pupil.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Pupil>(<any>null);
    }

    /**
     * Put
     * @return Successful Response
     */
    pupilPut(body: Pupil): Promise<Pupil> {
        let url_ = this.baseUrl + "/spos/pupil/";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPupilPut(_response);
        });
    }

    protected processPupilPut(response: Response): Promise<Pupil> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Pupil.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Pupil>(<any>null);
    }

    /**
     * Delete
     * @return Successful Response
     */
    pupilDelete(pupilId: string): Promise<boolean> {
        let url_ = this.baseUrl + "/spos/pupil/?";
        if (pupilId === undefined || pupilId === null)
            throw new Error("The parameter 'pupilId' must be defined and cannot be null.");
        else
            url_ += "pupilId=" + encodeURIComponent("" + pupilId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPupilDelete(_response);
        });
    }

    protected processPupilDelete(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export class PupilValuationClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Getall
     * @return Successful Response
     */
    all(): Promise<PupilValuations> {
        let url_ = this.baseUrl + "/spos/pupilvaluation/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAll(_response);
        });
    }

    protected processAll(response: Response): Promise<PupilValuations> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PupilValuations.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PupilValuations>(<any>null);
    }

    /**
     * Getdefault
     * @return Successful Response
     */
    default(): Promise<PupilValuation> {
        let url_ = this.baseUrl + "/spos/pupilvaluation/default";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDefault(_response);
        });
    }

    protected processDefault(response: Response): Promise<PupilValuation> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PupilValuation.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PupilValuation>(<any>null);
    }

    /**
     * Put
     * @return Successful Response
     */
    pupilvaluationPut(body: PupilValuation): Promise<PupilValuation> {
        let url_ = this.baseUrl + "/spos/pupilvaluation/";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPupilvaluationPut(_response);
        });
    }

    protected processPupilvaluationPut(response: Response): Promise<PupilValuation> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PupilValuation.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PupilValuation>(<any>null);
    }

    /**
     * Delete
     * @return Successful Response
     */
    pupilvaluationDelete(pupilValuationId: string): Promise<boolean> {
        let url_ = this.baseUrl + "/spos/pupilvaluation/?";
        if (pupilValuationId === undefined || pupilValuationId === null)
            throw new Error("The parameter 'pupilValuationId' must be defined and cannot be null.");
        else
            url_ += "pupilValuationId=" + encodeURIComponent("" + pupilValuationId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPupilvaluationDelete(_response);
        });
    }

    protected processPupilvaluationDelete(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export class PupilValuationSetClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Getall
     * @return Successful Response
     */
    all(): Promise<PupilValuationSets> {
        let url_ = this.baseUrl + "/spos/pupilvaluationset/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAll(_response);
        });
    }

    protected processAll(response: Response): Promise<PupilValuationSets> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PupilValuationSets.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PupilValuationSets>(<any>null);
    }

    /**
     * Getdefault
     * @return Successful Response
     */
    default(): Promise<PupilValuationSet> {
        let url_ = this.baseUrl + "/spos/pupilvaluationset/default";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDefault(_response);
        });
    }

    protected processDefault(response: Response): Promise<PupilValuationSet> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PupilValuationSet.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PupilValuationSet>(<any>null);
    }

    /**
     * Put
     * @return Successful Response
     */
    pupilvaluationsetPut(body: PupilValuationSet): Promise<PupilValuationSet> {
        let url_ = this.baseUrl + "/spos/pupilvaluationset/";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPupilvaluationsetPut(_response);
        });
    }

    protected processPupilvaluationsetPut(response: Response): Promise<PupilValuationSet> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PupilValuationSet.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PupilValuationSet>(<any>null);
    }

    /**
     * Delete
     * @return Successful Response
     */
    pupilvaluationsetDelete(pupilValuationSetId: string): Promise<boolean> {
        let url_ = this.baseUrl + "/spos/pupilvaluationset/?";
        if (pupilValuationSetId === undefined || pupilValuationSetId === null)
            throw new Error("The parameter 'pupilValuationSetId' must be defined and cannot be null.");
        else
            url_ += "pupilValuationSetId=" + encodeURIComponent("" + pupilValuationSetId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPupilvaluationsetDelete(_response);
        });
    }

    protected processPupilvaluationsetDelete(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export class SchoolClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Getall
     * @return Successful Response
     */
    all(): Promise<Schools> {
        let url_ = this.baseUrl + "/spos/school/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAll(_response);
        });
    }

    protected processAll(response: Response): Promise<Schools> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Schools.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Schools>(<any>null);
    }

    /**
     * Getdefault
     * @return Successful Response
     */
    default(): Promise<School> {
        let url_ = this.baseUrl + "/spos/school/default";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDefault(_response);
        });
    }

    protected processDefault(response: Response): Promise<School> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = School.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<School>(<any>null);
    }

    /**
     * Put
     * @return Successful Response
     */
    schoolPut(body: School): Promise<School> {
        let url_ = this.baseUrl + "/spos/school/";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSchoolPut(_response);
        });
    }

    protected processSchoolPut(response: Response): Promise<School> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = School.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<School>(<any>null);
    }

    /**
     * Delete
     * @return Successful Response
     */
    schoolDelete(schoolId: string): Promise<boolean> {
        let url_ = this.baseUrl + "/spos/school/?";
        if (schoolId === undefined || schoolId === null)
            throw new Error("The parameter 'schoolId' must be defined and cannot be null.");
        else
            url_ += "schoolId=" + encodeURIComponent("" + schoolId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSchoolDelete(_response);
        });
    }

    protected processSchoolDelete(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export class SchoolClassClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Getall
     * @return Successful Response
     */
    all(): Promise<SchoolClasses> {
        let url_ = this.baseUrl + "/spos/schoolclass/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAll(_response);
        });
    }

    protected processAll(response: Response): Promise<SchoolClasses> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SchoolClasses.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SchoolClasses>(<any>null);
    }

    /**
     * Getdefault
     * @return Successful Response
     */
    default(): Promise<SchoolClass> {
        let url_ = this.baseUrl + "/spos/schoolclass/default";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDefault(_response);
        });
    }

    protected processDefault(response: Response): Promise<SchoolClass> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SchoolClass.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SchoolClass>(<any>null);
    }

    /**
     * Put
     * @return Successful Response
     */
    schoolclassPut(body: SchoolClass): Promise<SchoolClass> {
        let url_ = this.baseUrl + "/spos/schoolclass/";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSchoolclassPut(_response);
        });
    }

    protected processSchoolclassPut(response: Response): Promise<SchoolClass> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SchoolClass.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SchoolClass>(<any>null);
    }

    /**
     * Delete
     * @return Successful Response
     */
    schoolclassDelete(schoolClassId: string): Promise<boolean> {
        let url_ = this.baseUrl + "/spos/schoolclass/?";
        if (schoolClassId === undefined || schoolClassId === null)
            throw new Error("The parameter 'schoolClassId' must be defined and cannot be null.");
        else
            url_ += "schoolClassId=" + encodeURIComponent("" + schoolClassId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSchoolclassDelete(_response);
        });
    }

    protected processSchoolclassDelete(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export class ValuationClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Getall
     * @return Successful Response
     */
    all(): Promise<Valuations> {
        let url_ = this.baseUrl + "/spos/valuation/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAll(_response);
        });
    }

    protected processAll(response: Response): Promise<Valuations> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Valuations.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Valuations>(<any>null);
    }

    /**
     * Getdefault
     * @return Successful Response
     */
    default(): Promise<Valuation> {
        let url_ = this.baseUrl + "/spos/valuation/default";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDefault(_response);
        });
    }

    protected processDefault(response: Response): Promise<Valuation> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Valuation.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Valuation>(<any>null);
    }

    /**
     * Put
     * @return Successful Response
     */
    valuationPut(body: Valuation): Promise<Valuation> {
        let url_ = this.baseUrl + "/spos/valuation/";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processValuationPut(_response);
        });
    }

    protected processValuationPut(response: Response): Promise<Valuation> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Valuation.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Valuation>(<any>null);
    }

    /**
     * Delete
     * @return Successful Response
     */
    valuationDelete(valuationId: string): Promise<boolean> {
        let url_ = this.baseUrl + "/spos/valuation/?";
        if (valuationId === undefined || valuationId === null)
            throw new Error("The parameter 'valuationId' must be defined and cannot be null.");
        else
            url_ += "valuationId=" + encodeURIComponent("" + valuationId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processValuationDelete(_response);
        });
    }

    protected processValuationDelete(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export class ValuationDetailClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Getall
     * @return Successful Response
     */
    all(): Promise<ValuationDetails> {
        let url_ = this.baseUrl + "/spos/valuationdetail/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAll(_response);
        });
    }

    protected processAll(response: Response): Promise<ValuationDetails> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ValuationDetails.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ValuationDetails>(<any>null);
    }

    /**
     * Getdefault
     * @return Successful Response
     */
    default(): Promise<ValuationDetail> {
        let url_ = this.baseUrl + "/spos/valuationdetail/default";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDefault(_response);
        });
    }

    protected processDefault(response: Response): Promise<ValuationDetail> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ValuationDetail.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ValuationDetail>(<any>null);
    }

    /**
     * Put
     * @return Successful Response
     */
    valuationdetailPut(body: ValuationDetail): Promise<ValuationDetail> {
        let url_ = this.baseUrl + "/spos/valuationdetail/";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processValuationdetailPut(_response);
        });
    }

    protected processValuationdetailPut(response: Response): Promise<ValuationDetail> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ValuationDetail.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ValuationDetail>(<any>null);
    }

    /**
     * Delete
     * @return Successful Response
     */
    valuationdetailDelete(valuationDetailId: string): Promise<boolean> {
        let url_ = this.baseUrl + "/spos/valuationdetail/?";
        if (valuationDetailId === undefined || valuationDetailId === null)
            throw new Error("The parameter 'valuationDetailId' must be defined and cannot be null.");
        else
            url_ += "valuationDetailId=" + encodeURIComponent("" + valuationDetailId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processValuationdetailDelete(_response);
        });
    }

    protected processValuationdetailDelete(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export class ReportClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Requestpupilreport
     * @return Successful Response
     */
    pupil(pupilId: string): Promise<void> {
        let url_ = this.baseUrl + "/spos/report/pupil?";
        if (pupilId === undefined || pupilId === null)
            throw new Error("The parameter 'pupilId' must be defined and cannot be null.");
        else
            url_ += "pupilId=" + encodeURIComponent("" + pupilId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPupil(_response);
        });
    }

    protected processPupil(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Requestschoolclassreport
     * @return Successful Response
     */
    schoolclass(schoolClassId: string): Promise<void> {
        let url_ = this.baseUrl + "/spos/report/schoolclass?";
        if (schoolClassId === undefined || schoolClassId === null)
            throw new Error("The parameter 'schoolClassId' must be defined and cannot be null.");
        else
            url_ += "schoolClassId=" + encodeURIComponent("" + schoolClassId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSchoolclass(_response);
        });
    }

    protected processSchoolclass(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class ValuationDetailTextClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Getall
     * @return Successful Response
     */
    all(): Promise<ValuationDetailTexts> {
        let url_ = this.baseUrl + "/spos/valuationdetailtext/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAll(_response);
        });
    }

    protected processAll(response: Response): Promise<ValuationDetailTexts> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ValuationDetailTexts.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ValuationDetailTexts>(<any>null);
    }

    /**
     * Getdefault
     * @return Successful Response
     */
    default(): Promise<ValuationDetailText> {
        let url_ = this.baseUrl + "/spos/valuationdetailtext/default";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDefault(_response);
        });
    }

    protected processDefault(response: Response): Promise<ValuationDetailText> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ValuationDetailText.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ValuationDetailText>(<any>null);
    }

    /**
     * Put
     * @return Successful Response
     */
    valuationdetailtextPut(body: ValuationDetailText): Promise<ValuationDetailText> {
        let url_ = this.baseUrl + "/spos/valuationdetailtext/";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processValuationdetailtextPut(_response);
        });
    }

    protected processValuationdetailtextPut(response: Response): Promise<ValuationDetailText> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ValuationDetailText.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ValuationDetailText>(<any>null);
    }

    /**
     * Delete
     * @return Successful Response
     */
    valuationdetailtextDelete(valuationDetailTextId: string): Promise<boolean> {
        let url_ = this.baseUrl + "/spos/valuationdetailtext/?";
        if (valuationDetailTextId === undefined || valuationDetailTextId === null)
            throw new Error("The parameter 'valuationDetailTextId' must be defined and cannot be null.");
        else
            url_ += "ValuationDetailTextId=" + encodeURIComponent("" + valuationDetailTextId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processValuationdetailtextDelete(_response);
        });
    }

    protected processValuationdetailtextDelete(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export class HTTPValidationError implements IHTTPValidationError {
    detail?: ValidationError[];

    constructor(data?: IHTTPValidationError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["detail"])) {
                this.detail = [] as any;
                for (let item of _data["detail"])
                    this.detail!.push(ValidationError.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HTTPValidationError {
        data = typeof data === 'object' ? data : {};
        let result = new HTTPValidationError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.detail)) {
            data["detail"] = [];
            for (let item of this.detail)
                data["detail"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IHTTPValidationError {
    detail?: ValidationError[];
}

export class Pupil implements IPupil {
    id?: string;
    schoolClassId?: string;
    type?: string;
    name?: string;
    familyName?: string;
    givenName?: string;
    changeDate?: Date;

    constructor(data?: IPupil) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.id = "00000000-0000-0000-0000-000000000000";
            this.schoolClassId = "00000000-0000-0000-0000-000000000000";
            this.type = "pupil";
            this.name = "<insert>";
            this.familyName = "<insert>";
            this.givenName = "<insert>";
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : "00000000-0000-0000-0000-000000000000";
            this.schoolClassId = _data["schoolClassId"] !== undefined ? _data["schoolClassId"] : "00000000-0000-0000-0000-000000000000";
            this.type = _data["type"] !== undefined ? _data["type"] : "pupil";
            this.name = _data["name"] !== undefined ? _data["name"] : "<insert>";
            this.familyName = _data["familyName"] !== undefined ? _data["familyName"] : "<insert>";
            this.givenName = _data["givenName"] !== undefined ? _data["givenName"] : "<insert>";
            this.changeDate = _data["changeDate"] ? new Date(_data["changeDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Pupil {
        data = typeof data === 'object' ? data : {};
        let result = new Pupil();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["schoolClassId"] = this.schoolClassId;
        data["type"] = this.type;
        data["name"] = this.name;
        data["familyName"] = this.familyName;
        data["givenName"] = this.givenName;
        data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IPupil {
    id?: string;
    schoolClassId?: string;
    type?: string;
    name?: string;
    familyName?: string;
    givenName?: string;
    changeDate?: Date;
}

export class PupilValuation implements IPupilValuation {
    id?: string;
    pupilValuationSetId?: string;
    valuationId?: string;
    type?: string;
    name?: string;
    grade?: number;
    gradeText?: string;
    changeDate?: Date;

    constructor(data?: IPupilValuation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.id = "00000000-0000-0000-0000-000000000000";
            this.pupilValuationSetId = "00000000-0000-0000-0000-000000000000";
            this.valuationId = "00000000-0000-0000-0000-000000000000";
            this.type = "pupilValuation";
            this.name = "<insert>";
            this.grade = 0;
            this.gradeText = "<insert>";
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : "00000000-0000-0000-0000-000000000000";
            this.pupilValuationSetId = _data["pupilValuationSetId"] !== undefined ? _data["pupilValuationSetId"] : "00000000-0000-0000-0000-000000000000";
            this.valuationId = _data["valuationId"] !== undefined ? _data["valuationId"] : "00000000-0000-0000-0000-000000000000";
            this.type = _data["type"] !== undefined ? _data["type"] : "pupilValuation";
            this.name = _data["name"] !== undefined ? _data["name"] : "<insert>";
            this.grade = _data["grade"] !== undefined ? _data["grade"] : 0;
            this.gradeText = _data["gradeText"] !== undefined ? _data["gradeText"] : "<insert>";
            this.changeDate = _data["changeDate"] ? new Date(_data["changeDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PupilValuation {
        data = typeof data === 'object' ? data : {};
        let result = new PupilValuation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["pupilValuationSetId"] = this.pupilValuationSetId;
        data["valuationId"] = this.valuationId;
        data["type"] = this.type;
        data["name"] = this.name;
        data["grade"] = this.grade;
        data["gradeText"] = this.gradeText;
        data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IPupilValuation {
    id?: string;
    pupilValuationSetId?: string;
    valuationId?: string;
    type?: string;
    name?: string;
    grade?: number;
    gradeText?: string;
    changeDate?: Date;
}

export class PupilValuationSet implements IPupilValuationSet {
    id?: string;
    pupilId?: string;
    type?: string;
    name?: string;
    changeDate?: Date;

    constructor(data?: IPupilValuationSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.id = "00000000-0000-0000-0000-000000000000";
            this.pupilId = "00000000-0000-0000-0000-000000000000";
            this.type = "pupilValuationSet";
            this.name = "<insert>";
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : "00000000-0000-0000-0000-000000000000";
            this.pupilId = _data["pupilId"] !== undefined ? _data["pupilId"] : "00000000-0000-0000-0000-000000000000";
            this.type = _data["type"] !== undefined ? _data["type"] : "pupilValuationSet";
            this.name = _data["name"] !== undefined ? _data["name"] : "<insert>";
            this.changeDate = _data["changeDate"] ? new Date(_data["changeDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PupilValuationSet {
        data = typeof data === 'object' ? data : {};
        let result = new PupilValuationSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["pupilId"] = this.pupilId;
        data["type"] = this.type;
        data["name"] = this.name;
        data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IPupilValuationSet {
    id?: string;
    pupilId?: string;
    type?: string;
    name?: string;
    changeDate?: Date;
}

export class PupilValuationSets implements IPupilValuationSets {
    items?: PupilValuationSet[];

    constructor(data?: IPupilValuationSets) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PupilValuationSet.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PupilValuationSets {
        data = typeof data === 'object' ? data : {};
        let result = new PupilValuationSets();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPupilValuationSets {
    items?: PupilValuationSet[];
}

export class PupilValuations implements IPupilValuations {
    items?: PupilValuation[];

    constructor(data?: IPupilValuations) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PupilValuation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PupilValuations {
        data = typeof data === 'object' ? data : {};
        let result = new PupilValuations();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPupilValuations {
    items?: PupilValuation[];
}

export class Pupils implements IPupils {
    items?: Pupil[];

    constructor(data?: IPupils) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Pupil.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Pupils {
        data = typeof data === 'object' ? data : {};
        let result = new Pupils();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPupils {
    items?: Pupil[];
}

export class School implements ISchool {
    id?: string;
    type?: string;
    name?: string;
    changeDate?: Date;

    constructor(data?: ISchool) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.id = "00000000-0000-0000-0000-000000000000";
            this.type = "school";
            this.name = "<insert>";
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : "00000000-0000-0000-0000-000000000000";
            this.type = _data["type"] !== undefined ? _data["type"] : "school";
            this.name = _data["name"] !== undefined ? _data["name"] : "<insert>";
            this.changeDate = _data["changeDate"] ? new Date(_data["changeDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): School {
        data = typeof data === 'object' ? data : {};
        let result = new School();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["name"] = this.name;
        data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ISchool {
    id?: string;
    type?: string;
    name?: string;
    changeDate?: Date;
}

export class SchoolClass implements ISchoolClass {
    id?: string;
    schoolId?: string;
    type?: string;
    name?: string;
    changeDate?: Date;

    constructor(data?: ISchoolClass) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.id = "00000000-0000-0000-0000-000000000000";
            this.schoolId = "00000000-0000-0000-0000-000000000000";
            this.type = "schoolClass";
            this.name = "<insert>";
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : "00000000-0000-0000-0000-000000000000";
            this.schoolId = _data["schoolId"] !== undefined ? _data["schoolId"] : "00000000-0000-0000-0000-000000000000";
            this.type = _data["type"] !== undefined ? _data["type"] : "schoolClass";
            this.name = _data["name"] !== undefined ? _data["name"] : "<insert>";
            this.changeDate = _data["changeDate"] ? new Date(_data["changeDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SchoolClass {
        data = typeof data === 'object' ? data : {};
        let result = new SchoolClass();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["schoolId"] = this.schoolId;
        data["type"] = this.type;
        data["name"] = this.name;
        data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ISchoolClass {
    id?: string;
    schoolId?: string;
    type?: string;
    name?: string;
    changeDate?: Date;
}

export class SchoolClasses implements ISchoolClasses {
    items?: SchoolClass[];

    constructor(data?: ISchoolClasses) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(SchoolClass.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SchoolClasses {
        data = typeof data === 'object' ? data : {};
        let result = new SchoolClasses();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISchoolClasses {
    items?: SchoolClass[];
}

export class Schools implements ISchools {
    items?: School[];

    constructor(data?: ISchools) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(School.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Schools {
        data = typeof data === 'object' ? data : {};
        let result = new Schools();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISchools {
    items?: School[];
}

export class ValidationError implements IValidationError {
    loc!: string[];
    msg!: string;
    type!: string;

    constructor(data?: IValidationError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.loc = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["loc"])) {
                this.loc = [] as any;
                for (let item of _data["loc"])
                    this.loc!.push(item);
            }
            this.msg = _data["msg"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): ValidationError {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.loc)) {
            data["loc"] = [];
            for (let item of this.loc)
                data["loc"].push(item);
        }
        data["msg"] = this.msg;
        data["type"] = this.type;
        return data; 
    }
}

export interface IValidationError {
    loc: string[];
    msg: string;
    type: string;
}

export class Valuation implements IValuation {
    id?: string;
    type?: string;
    name?: string;
    changeDate?: Date;

    constructor(data?: IValuation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.id = "00000000-0000-0000-0000-000000000000";
            this.type = "valuation";
            this.name = "<insert>";
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : "00000000-0000-0000-0000-000000000000";
            this.type = _data["type"] !== undefined ? _data["type"] : "valuation";
            this.name = _data["name"] !== undefined ? _data["name"] : "<insert>";
            this.changeDate = _data["changeDate"] ? new Date(_data["changeDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Valuation {
        data = typeof data === 'object' ? data : {};
        let result = new Valuation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["name"] = this.name;
        data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IValuation {
    id?: string;
    type?: string;
    name?: string;
    changeDate?: Date;
}

export class ValuationDetail implements IValuationDetail {
    id?: string;
    type?: string;
    name?: string;
    valuationId?: string;
    grade?: number;
    gradeTexts?: string[];
    changeDate?: Date;

    constructor(data?: IValuationDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.id = "00000000-0000-0000-0000-000000000000";
            this.type = "valuationDetail";
            this.name = "<insert>";
            this.valuationId = "00000000-0000-0000-0000-000000000000";
            this.grade = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : "00000000-0000-0000-0000-000000000000";
            this.type = _data["type"] !== undefined ? _data["type"] : "valuationDetail";
            this.name = _data["name"] !== undefined ? _data["name"] : "<insert>";
            this.valuationId = _data["valuationId"] !== undefined ? _data["valuationId"] : "00000000-0000-0000-0000-000000000000";
            this.grade = _data["grade"] !== undefined ? _data["grade"] : 0;
            if (Array.isArray(_data["gradeTexts"])) {
                this.gradeTexts = [] as any;
                for (let item of _data["gradeTexts"])
                    this.gradeTexts!.push(item);
            }
            this.changeDate = _data["changeDate"] ? new Date(_data["changeDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ValuationDetail {
        data = typeof data === 'object' ? data : {};
        let result = new ValuationDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["name"] = this.name;
        data["valuationId"] = this.valuationId;
        data["grade"] = this.grade;
        if (Array.isArray(this.gradeTexts)) {
            data["gradeTexts"] = [];
            for (let item of this.gradeTexts)
                data["gradeTexts"].push(item);
        }
        data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IValuationDetail {
    id?: string;
    type?: string;
    name?: string;
    valuationId?: string;
    grade?: number;
    gradeTexts?: string[];
    changeDate?: Date;
}

export class ValuationDetailText implements IValuationDetailText {
    id?: string;
    type?: string;
    text?: string;
    valuationDetailId?: string;

    constructor(data?: IValuationDetailText) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.id = "00000000-0000-0000-0000-000000000000";
            this.type = "valuationDetailText";
            this.text = "valuationDetail";
            this.valuationDetailId = "00000000-0000-0000-0000-000000000000";
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : "00000000-0000-0000-0000-000000000000";
            this.type = _data["type"] !== undefined ? _data["type"] : "valuationDetailText";
            this.text = _data["text"] !== undefined ? _data["text"] : "valuationDetail";
            this.valuationDetailId = _data["valuationDetailId"] !== undefined ? _data["valuationDetailId"] : "00000000-0000-0000-0000-000000000000";
        }
    }

    static fromJS(data: any): ValuationDetailText {
        data = typeof data === 'object' ? data : {};
        let result = new ValuationDetailText();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["text"] = this.text;
        data["valuationDetailId"] = this.valuationDetailId;
        return data; 
    }
}

export interface IValuationDetailText {
    id?: string;
    type?: string;
    text?: string;
    valuationDetailId?: string;
}

export class ValuationDetailTexts implements IValuationDetailTexts {
    items?: ValuationDetailText[];

    constructor(data?: IValuationDetailTexts) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ValuationDetailText.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ValuationDetailTexts {
        data = typeof data === 'object' ? data : {};
        let result = new ValuationDetailTexts();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IValuationDetailTexts {
    items?: ValuationDetailText[];
}

export class ValuationDetails implements IValuationDetails {
    items?: ValuationDetail[];

    constructor(data?: IValuationDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ValuationDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ValuationDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ValuationDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IValuationDetails {
    items?: ValuationDetail[];
}

export class Valuations implements IValuations {
    items?: Valuation[];

    constructor(data?: IValuations) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Valuation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Valuations {
        data = typeof data === 'object' ? data : {};
        let result = new Valuations();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IValuations {
    items?: Valuation[];
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}